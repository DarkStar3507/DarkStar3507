#include <iostream>
#include <string>

using namespace std;

struct Nodo {
    string valor;
    Nodo *siguiente;
};

class ListaCircularEnlazada {
private:
    Nodo *cola;

public:
    ListaCircularEnlazada() {
        cola = NULL;
    }

    void agregarNodo(string valor) {
        Nodo *nuevoNodo = new Nodo;
        nuevoNodo->valor = valor;

        if (cola == NULL) { // si la lista esté vacía
            nuevoNodo->siguiente = nuevoNodo;
            cola = nuevoNodo;
        }
        else if (cola->valor <= valor) { // si el nuevo nodo es mayor al último
            nuevoNodo->siguiente = cola->siguiente;
            cola->siguiente = nuevoNodo;
            cola = nuevoNodo;
        }
        else { // caso general
            Nodo *actual = cola->siguiente;
            Nodo *anterior = cola;

            while (actual->valor < valor) {
                anterior = actual;
                actual = actual->siguiente;
            }

            anterior->siguiente = nuevoNodo;
            nuevoNodo->siguiente = actual;
        }
    }

    void imprimirLista() {
        if (cola == NULL) {
            cout << "La lista está vacía" << endl;
        }
        else {
            Nodo *actual = cola->siguiente;

            do {
                cout << actual->valor << endl;
                actual = actual->siguiente;
            } while (actual != cola->siguiente);
        }
    }

    void eliminarNodo(string valor) {
        if (cola == NULL) {
            return; // lista vacía
        }

        Nodo *anterior = cola;
        Nodo *actual = cola->siguiente;

        while (actual != cola) {
            if (actual->valor == valor) {
                anterior->siguiente = actual->siguiente;

                if (actual == cola) {
                    cola = anterior;
                }

                delete actual;
                return;
            }

            anterior = actual;
            actual = actual->siguiente;
        }

        if (actual->valor == valor) { // si la palabra a eliminar es la última
            anterior->siguiente = actual->siguiente;

            if (actual == cola) {
                cola = anterior;
            }

            delete actual;
        }
    }
};

int main() {
    ListaCircularEnlazada lista;

    lista.agregarNodo("BUSCAR");
    lista.agregarNodo("DAR");
    lista.agregarNodo("EMBARCAR");
    lista.agregarNodo("FRIALDAD");
    lista.agregarNodo("GRACIAS");
    lista.agregarNodo("HONDURAS");
    lista.agregarNodo("AYUDA");
    lista.agregarNodo("COLLAR");

    cout << "Lista original:" << endl;
    lista.imprimirLista();
    cout << endl;

    lista.eliminarNodo("EMBARCAR");
    cout << "Lista despues de eliminar -> EMBARCAR <- : " << endl;
    lista.imprimirLista();
    cout << endl;

   
}
